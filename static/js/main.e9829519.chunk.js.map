{"version":3,"sources":["Model.ts","Calculator.ts","Parser.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Direction","Instruction","parsenumber","str","num","Number","isNaN","Error","parseDirection","App","useState","input","setInput","output","setOutput","error","setError","Grid","container","direction","alignContent","justify","spacing","item","sm","FormControl","component","fullWidth","FormLabel","required","TextareaAutosize","aria-label","rowsMin","style","minWidth","value","placeholder","onChange","event","target","FormHelperText","Button","variant","color","onClick","parsedInput","text","lines","split","boundaryInput","boundary","x","y","rovers","i","length","roverInput","rover","location","instructions","map","char","push","parseInput","newRoverState","M","E","W","N","S","L","R","calculateOutput","console","log","Typography","index","key","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e9829519.chunk.js","sourcesContent":["export enum Direction {\n  N = \"N\",\n  E = \"E\",\n  S = \"S\",\n  W = \"W\"\n}\n\nexport enum Instruction {\n  L = \"L\",\n  R = \"R\",\n  M = \"M\"\n}\n\nexport interface Coordinate {\n  x: number\n  y: number\n}\n\nexport interface Rover {\n  location: Coordinate\n  direction: Direction,\n  instructions: Instruction[]\n}\n\nexport interface ParsedInput {\n  boundary: Coordinate\n  rovers: Rover[]\n}\n","import { ParsedInput, Rover, Instruction, Direction } from \"./Model\";\n\nexport const calculateOutput = (input: ParsedInput): Rover[] => {\n  return input.rovers.map(rover => {\n    const newRoverState = {\n      location: {...rover.location},\n      direction: rover.direction\n    }\n    for (let instruction of rover.instructions) {\n      switch(instruction) {\n        case Instruction.M:\n          switch(newRoverState.direction) {\n            case Direction.E:\n              if (newRoverState.location.x < input.boundary.x) {\n                newRoverState.location.x++;\n              }\n              break;\n            case Direction.W:\n              if (newRoverState.location.x > 0) {\n                newRoverState.location.x--;\n              }\n              break;\n            case Direction.N:\n              if (newRoverState.location.y < input.boundary.y) {\n                newRoverState.location.y++;\n              }\n              break;\n            case Direction.S:\n              if (newRoverState.location.y > 0) {\n                newRoverState.location.y--;\n              }\n              break;\n          }\n          break;\n        case Instruction.L:\n          switch(newRoverState.direction) {\n            case Direction.E:\n              newRoverState.direction = Direction.N;\n              break;\n            case Direction.W:\n              newRoverState.direction = Direction.S;\n              break;\n            case Direction.N:\n              newRoverState.direction = Direction.W;\n              break;\n            case Direction.S:\n              newRoverState.direction = Direction.E;\n              break;\n          }\n          break;\n        case Instruction.R:\n          switch(newRoverState.direction) {\n            case Direction.E:\n              newRoverState.direction = Direction.S;\n              break;\n            case Direction.W:\n              newRoverState.direction = Direction.N;\n              break;\n            case Direction.N:\n              newRoverState.direction = Direction.E;\n              break;\n            case Direction.S:\n              newRoverState.direction = Direction.W;\n              break;\n          }\n      }\n    }\n    return {\n      ...newRoverState,\n      instructions: []\n    }\n  });\n}\n","import { Direction, Instruction, ParsedInput, Rover } from \"./Model\";\n\nexport const parsenumber = (str: string): number => {\n  const num = Number(str);\n  if (isNaN(num)) {\n    throw Error(\"Failed to parse string\");\n  }\n  return num;\n}\n\nexport const parseDirection = (str: string): Direction => {\n  if (str in Direction) {\n    return str as Direction;\n  }\n  throw Error(\"Failed to parse string\");\n}\n\nexport const parseInstructions = (str: string): Instruction[] => {\n  return str.split(\"\").map(char => {\n    if (char in Instruction) {\n      return char as Instruction;\n    }\n    throw Error(\"Failed to parse string\");\n  })\n}\nexport const parseInput = (text: string) => {\n  const lines = text.split(\"\\n\");\n  const boundaryInput = lines[0].split(\" \");\n  const parsedInput: ParsedInput = {\n    boundary: {\n      x: parsenumber(boundaryInput[0]),\n      y: parsenumber(boundaryInput[1])\n    },\n    rovers: []\n  };\n  // Loop over each rover starting from second line and incementing 2 as rover input 2 lines\n  for (let i = 1; i < lines.length; i+=2) {\n    const roverInput = lines[i].split(\" \");\n    const rover: Rover = {\n      location: {\n        x: parsenumber(roverInput[0]),\n        y: parsenumber(roverInput[1])\n      },\n      direction: parseDirection(roverInput[2]),\n      instructions: parseInstructions(lines[i+1])\n    };\n    parsedInput.rovers.push(rover);\n  }\n  return parsedInput;\n}\n","import React, { useState, ChangeEvent } from 'react';\nimport { Button, Grid, FormLabel, TextareaAutosize, FormControl, FormHelperText, Typography } from \"@material-ui/core\";\nimport { calculateOutput } from './Calculator';\nimport { parseInput } from './Parser';\nimport { Rover } from './Model';\n\nconst placeholder = `5 5\n1 2 N\nLMLMLMLMM\n3 3 E\nMMRMMRMRRM`;\n\nconst App = () => {\n\n  const [input, setInput] = useState(\"\");\n  const [output, setOutput] = useState<Rover[]>([]);\n  const [error, setError] = useState(false);\n\n  const handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    setInput(event.target.value);\n  }\n\n  const handleSubmit = () => {\n    try {\n      const parsedInput = parseInput(input);\n      const output = calculateOutput(parsedInput);\n      console.log(parsedInput);\n      console.log(output);\n      setOutput(output);\n    } catch {\n      setError(true);\n    }\n  }\n\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      alignContent=\"center\"\n      justify=\"flex-end\"\n      spacing={2}\n    >\n      <Grid\n        item\n        sm={4}\n      >\n        <FormControl component=\"fieldset\" fullWidth>\n          <FormLabel required>\n            Input\n          </FormLabel>\n          <TextareaAutosize\n            aria-label=\"input\"\n            rowsMin={5}\n            style={{minWidth:400}}\n            value={input}\n            placeholder={placeholder}\n            onChange={handleChange}\n          />\n          {error && <FormHelperText error>Invalid input</FormHelperText>}\n        </FormControl>\n      </Grid>\n      <Grid\n        item\n        sm={1}\n      >\n        <Button\n          fullWidth\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleSubmit}\n        >\n          Submit\n        </Button>\n      </Grid>\n      {output.length > 0 && (\n        <Grid\n          item\n          sm={4}\n        >\n          <Typography variant=\"subtitle1\">Output:</Typography>\n          {output.map((rover, index) => (\n            <Typography key={index} variant=\"subtitle2\">\n              {`${rover.location.x} ${rover.location.y} ${rover.direction}`}\n            </Typography>\n          ))}\n        </Grid>\n      )}\n    </Grid>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}